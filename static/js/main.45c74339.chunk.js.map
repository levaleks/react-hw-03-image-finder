{"version":3,"sources":["components/ImageFinder/_core/pixabey-api/PixabeyAPI.ts","components/ImageFinder/ImageFinder.sc.ts","components/ImageFinder/SearchBar/SearchBar.sc.ts","components/ImageFinder/SearchBar/SearchBar.tsx","components/ImageFinder/ImageGallery/ImageGallery.sc.ts","components/ImageFinder/ImageGallery/ImageGalleryItem/ImageGalleryItem.sc.ts","components/ImageFinder/Modal/Modal.sc.ts","components/ImageFinder/Modal/Modal.tsx","components/ImageFinder/Loader/Loader.sc.ts","components/ImageFinder/Loader/Loader.tsx","components/ImageFinder/ImageGallery/ImageGalleryItem/ImageGalleryItem.tsx","components/ImageFinder/Modal/useModal.ts","components/ImageFinder/ImageGallery/ImageGallery.tsx","components/ImageFinder/Button/Button.sc.ts","components/ImageFinder/Button/Button.tsx","components/ImageFinder/_core/imageFinderReducer.ts","components/ImageFinder/ImageFinder.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["axiosInstance","axios","create","pixabeyAPI","constructor","httpClient","searchParameters","searchParams","URLSearchParams","Object","entries","key","process","forEach","value","append","String","data","this","get","toString","SImageFinder","styled","div","props","isFullHeight","SSearchBar","header","SSearchForm","form","SSearchFormButton","button","SearchFormButtonLabel","span","SSearchFormInput","input","SearchBar","onSearch","onSubmit","e","preventDefault","query","target","trim","replace","type","name","autoComplete","autoFocus","placeholder","SImageGallery","ul","SImageGalleryItem","li","SImageGalleryItemImage","img","SOverlay","SModal","Modal","isShowing","hide","children","useEffect","handler","event","window","addEventListener","removeEventListener","createPortal","onClick","stopPropagation","document","body","SLoader","Loader","color","height","width","ImageGalleryItem","id","previewImgUrl","largeImgUrl","getRef","toggle","setIsShowing","useState","useModal","isLoaded","setIsLoaded","itemRef","useRef","ref","src","alt","onLoad","ImageGallery","images","perPage","onItemRef","items","useMemo","firstItemIndexOnLastPage","chunk","length","map","webformatURL","largeImageURL","i","undefined","SButton","Button","imageFinderInitialState","q","image_type","orientation","page","per_page","hits","isLoading","ImageFinderActions","imageFinderReducer","state","action","SET_QUERY","produce","draft","payload","assign","UPDATE_QUERY","UPDATE_HITS","push","ImageFinder","dispatch","useReducer","handleLoadMore","useCallback","nextPage","Number","async","res","findImages","scrollTo","top","current","offsetTop","parseInt","behavior","Boolean","App","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45c74339.chunk.js","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { PixabeySearchParameters } from './abstracts/PixabeySearchParameters';\nimport { PixabeySearchResponse } from './abstracts/PixabeySearchResponse';\n\nexport class PixabeyAPI {\n    constructor(private httpClient: AxiosInstance) {}\n\n    async findImages(searchParameters: PixabeySearchParameters): Promise<PixabeySearchResponse> {\n        const searchParams = new URLSearchParams();\n\n        Object.entries({ key: `${process.env.REACT_APP_PIXABEY_API_KEY}`, ...searchParameters }).forEach(\n            ([key, value]) => {\n                searchParams.append(key, String(value));\n            },\n        );\n\n        const { data } = await this.httpClient.get<PixabeySearchResponse>(\n            `${process.env.REACT_APP_PIXABEY_API_URL}/?${searchParams.toString()}`,\n        );\n\n        return data;\n    }\n}\n\nconst axiosInstance = axios.create();\n\nexport const pixabeyAPI = new PixabeyAPI(axiosInstance);\n","import styled from 'styled-components';\n\nexport const SImageFinder = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 16px;\n    padding-bottom: ${(props): string => (props.isFullHeight ? '0' : '24px')};\n`;\n","import styled from 'styled-components';\n\nexport const SEARCH_BAR_MIN_HEIGHT = '64px';\n\nexport const SSearchBar = styled.header`\n    top: 0;\n    left: 0;\n    position: sticky;\n    z-index: 1100;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: ${(props): string => (props.isFullHeight ? '100vh' : SEARCH_BAR_MIN_HEIGHT)};\n    padding: 12px 24px;\n    color: #fff;\n    background: ${(props): string =>\n        props.isFullHeight ? 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)' : '#3f51b5'};\n    box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n        0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n    transition: 0.4s;\n`;\n\nexport const SSearchForm = styled.form`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    background-color: #fff;\n    border-radius: 3px;\n    overflow: hidden;\n`;\n\nexport const SSearchFormButton = styled.button`\n    display: inline-block;\n    width: 48px;\n    height: 48px;\n    border: 0;\n    background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n    background-size: 40%;\n    background-repeat: no-repeat;\n    background-position: center;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    clip-path: inset(50%);\n    border: 0;\n`;\n\nexport const SSearchFormInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n\n    &::placeholder {\n        font: inherit;\n        font-size: 18px;\n    }\n`;\n","import React from 'react';\nimport { SearchFormButtonLabel, SSearchBar, SSearchForm, SSearchFormButton, SSearchFormInput } from './SearchBar.sc';\n\nexport type SearchBarProps = {\n    onSearch: (query: string) => void;\n    isFullHeight: boolean;\n};\n\nexport const SearchBar: React.FC<SearchBarProps> = ({ onSearch, isFullHeight }) => {\n    const handleSubmit = (e): void => {\n        e.preventDefault();\n\n        const query: string = e.target.query.value.trim().replace(/\\s{2,}/g, ' ');\n\n        onSearch(query);\n    };\n\n    return (\n        <SSearchBar isFullHeight={isFullHeight}>\n            <SSearchForm onSubmit={handleSubmit}>\n                <SSearchFormButton type=\"submit\">\n                    <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n                </SSearchFormButton>\n\n                <SSearchFormInput\n                    name=\"query\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search images and photos\"\n                />\n            </SSearchForm>\n        </SSearchBar>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SImageGallery = styled.ul`\n    display: grid;\n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    grid-gap: 16px;\n    padding: 0;\n    list-style: none;\n    margin: 0 auto;\n`;\n","import styled from 'styled-components';\n\nexport const SImageGalleryItem = styled.li`\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SImageGalleryItemImage = styled.img`\n    width: 100%;\n    height: 260px;\n    object-fit: cover;\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover {\n        transform: scale(1.03);\n        cursor: zoom-in;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const SOverlay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.8);\n    z-index: 1200;\n    cursor: pointer;\n`;\n\nexport const SModal = styled.div`\n    max-width: calc(100vw - 48px);\n    max-height: calc(100vh - 24px);\n    cursor: default;\n\n    img {\n        max-height: inherit;\n    }\n`;\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { SModal, SOverlay } from './Modal.sc';\n\nexport type ModalProps = {\n    isShowing: boolean;\n    hide: () => void;\n};\n\nexport const Modal: React.FC<ModalProps> = ({ isShowing, hide, children }) => {\n    const handleClickModalBody = (e): void => {\n        e.stopPropagation();\n    };\n\n    useEffect(() => {\n        const handler = (event): void => {\n            if (event.key === 'Escape') hide();\n        };\n\n        window.addEventListener('keydown', handler);\n\n        return (): void => {\n            window.removeEventListener('keydown', handler);\n        };\n    }, [hide]);\n\n    return isShowing\n        ? createPortal(\n              <SOverlay onClick={hide}>\n                  <SModal onClick={handleClickModalBody}>{children}</SModal>\n              </SOverlay>,\n              document.body,\n          )\n        : null;\n};\n","import styled from 'styled-components';\n\nexport const SLoader = styled.div`\n    margin: 0 auto;\n`;\n","import React from 'react';\nimport Indicator from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { SLoader } from './Loader.sc';\n\nexport const Loader: React.FC = () => {\n    return (\n        <SLoader>\n            <Indicator type=\"ThreeDots\" color=\"#E33371\" height={80} width={80} />\n        </SLoader>\n    );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { SImageGalleryItem, SImageGalleryItemImage } from './ImageGalleryItem.sc';\nimport { useModal } from '../../Modal/useModal';\nimport { Modal } from '../../Modal';\nimport { Loader } from '../../Loader';\n\nexport type ImageGalleryItem = {\n    id: number;\n    previewImgUrl: string;\n    largeImgUrl: string;\n    getRef?: (ref) => void;\n};\n\nexport const ImageGalleryItem: React.FC<ImageGalleryItem> = ({ id, previewImgUrl, largeImgUrl, getRef }) => {\n    const { isShowing, toggle } = useModal();\n    const [isLoaded, setIsLoaded] = useState(false);\n    const itemRef = useRef(null);\n\n    useEffect(() => {\n        if (getRef) {\n            getRef(itemRef);\n        }\n    }, [getRef]);\n\n    return (\n        <>\n            <SImageGalleryItem ref={itemRef}>\n                <SImageGalleryItemImage src={previewImgUrl} alt={String(id)} onClick={toggle} />\n            </SImageGalleryItem>\n            <Modal isShowing={isShowing} hide={toggle}>\n                <img src={largeImgUrl} alt={String(id)} onLoad={(): void => setIsLoaded(true)} />\n                {!isLoaded && <Loader />}\n            </Modal>\n        </>\n    );\n};\n","import { useState } from 'react';\n\nexport type UseModal = { isShowing: boolean; toggle: () => void };\n\nexport const useModal = (): UseModal => {\n    const [isShowing, setIsShowing] = useState(false);\n\n    const toggle = (): void => {\n        setIsShowing(!isShowing);\n    };\n\n    return {\n        isShowing,\n        toggle,\n    };\n};\n","import React, { useMemo } from 'react';\nimport { chunk } from 'lodash';\nimport { SImageGallery } from './ImageGallery.sc';\nimport { PixabeySearchResponseHitLight } from '../_core/imageFinderReducer';\nimport { ImageGalleryItem } from './ImageGalleryItem';\n\nexport type ImageGalleryProps = {\n    images: PixabeySearchResponseHitLight[];\n    perPage?: number;\n    onItemRef?: (ref) => void;\n};\n\nexport const ImageGallery: React.FC<ImageGalleryProps> = ({ images, perPage = 20, onItemRef }) => {\n    const items = useMemo(() => {\n        const chunks = chunk(images, perPage);\n\n        const firstItemIndexOnLastPage = chunks.length * perPage - perPage;\n\n        return images.map(({ id, webformatURL, largeImageURL }, i) => (\n            <ImageGalleryItem\n                key={id}\n                id={id}\n                previewImgUrl={webformatURL}\n                largeImgUrl={largeImageURL}\n                getRef={i === firstItemIndexOnLastPage ? onItemRef : undefined}\n            />\n        ));\n    }, [images, onItemRef, perPage]);\n\n    return <SImageGallery>{items}</SImageGallery>;\n};\n","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n    margin: 0 auto;\n    padding: 8px 16px;\n    border-radius: 2px;\n    background-color: #3f51b5;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    text-align: center;\n    display: inline-block;\n    color: #fff;\n    border: 0;\n    text-decoration: none;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: 18px;\n    line-height: 24px;\n    font-style: normal;\n    font-weight: 500;\n    min-width: 180px;\n    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0px rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\n\n    &:hover,\n    &:focus {\n        background-color: #303f9f;\n    }\n`;\n","import React, { ButtonHTMLAttributes } from 'react';\nimport { SButton } from './Button.sc';\n\nexport type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const Button: React.FC<ButtonProps> = ({ children, ...props }) => {\n    return (\n        <SButton type=\"button\" {...props}>\n            {children}\n        </SButton>\n    );\n};\n","import { produce } from 'immer';\nimport { PixabeySearchParameters } from './pixabey-api/abstracts/PixabeySearchParameters';\nimport { PixabeySearchResponseHit } from './pixabey-api/abstracts/PixabeySearchResponse';\n\nexport type PixabeySearchResponseHitLight = Pick<PixabeySearchResponseHit, 'id' | 'webformatURL' | 'largeImageURL'>;\n\nexport type ImageFinderState = {\n    query: PixabeySearchParameters;\n    hits: PixabeySearchResponseHitLight[];\n    isLoading: boolean;\n};\n\nexport const imageFinderInitialState: ImageFinderState = {\n    query: {\n        q: '',\n        image_type: 'photo',\n        orientation: 'horizontal',\n        page: '1',\n        per_page: 15,\n    },\n    hits: [],\n    isLoading: false,\n};\n\nexport enum ImageFinderActions {\n    SET_QUERY = 'SET_QUERY',\n    UPDATE_QUERY = 'UPDATE_QUERY',\n    UPDATE_HITS = 'UPDATE_HITS',\n}\n\nexport type SetQueryAction = {\n    type: ImageFinderActions.SET_QUERY;\n    payload: {\n        query: PixabeySearchParameters;\n    };\n};\n\nexport type UpdateQueryAction = {\n    type: ImageFinderActions.UPDATE_QUERY;\n    payload: {\n        query: PixabeySearchParameters;\n    };\n};\n\nexport type UpdateHitsAction = {\n    type: ImageFinderActions.UPDATE_HITS;\n    payload: {\n        hits: PixabeySearchResponseHitLight[];\n    };\n};\n\nexport type ImageFinderActionTypes = SetQueryAction | UpdateQueryAction | UpdateHitsAction;\n\nexport const imageFinderReducer = (state: ImageFinderState, action: ImageFinderActionTypes): ImageFinderState => {\n    switch (action.type) {\n        case ImageFinderActions.SET_QUERY:\n            return produce(imageFinderInitialState, (draft) => {\n                if (action.payload.query.q) {\n                    draft.isLoading = true;\n                }\n\n                Object.assign(draft.query, action.payload.query);\n            });\n        case ImageFinderActions.UPDATE_QUERY:\n            return produce(state, (draft) => {\n                draft.isLoading = true;\n                Object.assign(draft.query, action.payload.query);\n            });\n        case ImageFinderActions.UPDATE_HITS:\n            return produce(state, (draft) => {\n                draft.isLoading = false;\n                draft.hits.push(...action.payload.hits);\n            });\n        default:\n            return state;\n    }\n};\n","import React, { useCallback, useEffect, useReducer } from 'react';\nimport { pixabeyAPI } from './_core/pixabey-api/PixabeyAPI';\nimport { SImageFinder } from './ImageFinder.sc';\nimport { SearchBar } from './SearchBar';\nimport { ImageGallery } from './ImageGallery';\nimport { Button } from './Button';\nimport { ImageFinderActions, imageFinderInitialState, imageFinderReducer } from './_core/imageFinderReducer';\nimport { Loader } from './Loader';\nimport { SEARCH_BAR_MIN_HEIGHT } from './SearchBar/SearchBar.sc';\n\nexport const ImageFinder: React.FC = () => {\n    const [{ isLoading, query, hits }, dispatch] = useReducer(imageFinderReducer, imageFinderInitialState);\n\n    const handleSearch = (q: string): void => {\n        dispatch({ type: ImageFinderActions.SET_QUERY, payload: { query: { q } } });\n    };\n\n    const handleLoadMore = useCallback(() => {\n        const nextPage = String(Number(query.page) + 1);\n\n        dispatch({ type: ImageFinderActions.UPDATE_QUERY, payload: { query: { page: nextPage } } });\n    }, [query.page]);\n\n    useEffect(() => {\n        const findImages = async () => {\n            const { hits: res } = await pixabeyAPI.findImages(query);\n\n            dispatch({ type: ImageFinderActions.UPDATE_HITS, payload: { hits: res || [] } });\n        };\n\n        if (query.q) {\n            findImages();\n        }\n    }, [query]);\n\n    const getRef = useCallback((ref): void => {\n        window.scrollTo({\n            top: ref.current.offsetTop - Number.parseInt(SEARCH_BAR_MIN_HEIGHT, 10) - 20,\n            behavior: 'smooth',\n        });\n    }, []);\n\n    return (\n        <SImageFinder isFullHeight={!query.q && !hits.length}>\n            <SearchBar onSearch={handleSearch} isFullHeight={!query.q && !hits.length} />\n            <ImageGallery images={hits} perPage={query.per_page} onItemRef={getRef} />\n            {isLoading && <Loader />}\n            {Boolean(!isLoading && hits.length) && <Button onClick={handleLoadMore}>Load more</Button>}\n        </SImageFinder>\n    );\n};\n","import React from 'react';\nimport { ImageFinder } from '../ImageFinder';\n\nexport const App: React.FC = () => {\n    return <ImageFinder />;\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}